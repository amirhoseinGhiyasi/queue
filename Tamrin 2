python 
class Node:    def __init__(self, coefficient, exponent):
        self.coefficient = coefficient        self.exponent = exponent
        self.next = None        self.prev = None
class Polynomial:
    def __init__(self):        self.head = Node(0, 0)  # Dummy node
        self.head.next = self.head        self.head.prev = self.head
        self.n = 0
    def get(self, ind):        if ind >= self.size():
            raise Exception('Index out of bounds')        x = self.head.next
        for i in range(ind):            x = x.next
        return x
    def insert_after(self, x, coefficient, exponent):        y = Node(coefficient, exponent)
        self.n += 1        y.prev = x
        y.next = x.next        x.next = y
        y.next.prev = y        return y
    def delete(self, x):
        if self.size() == 0:            raise Exception('List is empty')
        self.n -= 1        x.prev.next = x.next
        x.next.prev = x.prev        return x
    def find(self, coefficient, exponent):
        x = self.head.next        for i in range(self.size()):
            if x.coefficient == coefficient and x.exponent == exponent:                return x
            x = x.next        return None
    def size(self):
        return self.n
    def is_empty(self):        return self.n == 0
    def add_polynomial(self, other):
        result = Polynomial()        x = self.head.next
        y = other.head.next        while x != self.head and y != other.head:
            if x.exponent == y.exponent:                if x.coefficient + y.coefficient != 0:
                    result.insert_after(result.head.prev, x.coefficient + y.coefficient, x.exponent)                x = x.next
                y = y.next            elif x.exponent > y.exponent:
                result.insert_after(result.head.prev, x.coefficient, x.exponent)                x = x.next
            else:                result.insert_after(result.head.prev, y.coefficient, y.exponent)
                y = y.next
        while x != self.head:            result.insert_after(result.head.prev, x.coefficient, x.exponent)
            x = x.next
        while y != other.head:            result.insert_after(result.head.prev, y.coefficient, y.exponent)
            y = y.next
        return result
    def display(self):        x = self.head.next
        terms = []        while x != self.head:
            terms.append(f"{x.coefficient}x^{x.exponent}")            x = x.next
        return " + ".join(terms)
